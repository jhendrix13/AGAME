function Bosses(game, donors){
    game.bosses = this;
    
    var self = this;
    var gameVars = game.player.gameVars;
    var resources = game.player.resources;
    var funcs = game.funcs;
    
    this.scenarios = {
        1 : {
            'func' : function(){
                    var me = gameVars.bossScenario['boss'];
                    var vars = me['vars'];
                    var bossDifficulty = gameVars.bossDifficulty;

                    if(!vars.set){
                        vars.rbSoldiers = bossDifficulty*200000;
                        vars.soldiersRestore = vars.rbSoldiers;
                        vars.rewards.bc = bossDifficulty;
                        vars.rewards.money = 60000000*bossDifficulty;

                        //will this be a normal or specialized battle?
                        if(funcs.rand(1,3) == 2)
                            vars.excludeSoldiers.push(funcs.randomObjectElement(resources.items.soldiers));

                        //how quick will the attacks be?
                        switch(bossDifficulty){
                            case 1:
                                vars.intervalTime = 60000;
                                vars.waves = 2;
                                break;
                            case 2:
                                vars.intervalTime = 45000;
                                vars.waves = 3;
                                break;
                            case 3:
                                vars.intervalTime = 30000;
                                vars.waves = 4;
                                break;
                            default:
                                vars.intervalTime = 20000;
                                vars.waves = 4;
                                break;
                        }

                        var html = 'Below is your scenario for this random boss<hr><br/><table>';

                        html += '<tr><td><b>Boss Name</b></td><td>'+ gameVars.bossScenario['boss']['name'] +'</td></tr>';
                        if(vars.excludeSoldiers.length > 0){
                            html += '<tr><td><b>Scenario Type</b></td><td>Specialized Battle</td></tr>';
                            html += '<tr><td><b>Soldier not allowed:</b></td><td>'+ resources.items.soldiers[vars.excludeSoldiers[0]].name +'</td></tr>';
                        }else{
                            html += '<tr><td><b>Scenario Type</b></td><td>Normal Battle</td></tr>';
                        }

                        html += '<tr><td><b>Difficulty</b></td><td>Level '+ bossDifficulty +'</td></tr>';
                        html += '<tr><td><b>Attack interval: </b></td><td>'+ (vars.intervalTime)/1000 +' seconds</td></tr>';
                        html += '<tr><td><b>Enemy Soldiers:</b></td><td>'+ funcs.numberFormat(vars.rbSoldiers) +'</td></tr>';
                        html += '<tr><td><b>Waves: </b></td><td>'+ funcs.numberFormat(vars.waves) +'</td></tr>';
                        html += '<tr><td><b>Rewards:</b></td><td>'+ funcs.numberFormat(vars.rewards.bc) +' boss currency, $'+ funcs.numberFormat(vars.rewards.money) +'</td></tr></table>';

                        game.popup('SCENARIO #1', html, '', 0);
                        vars.set = true;
                    }

                    game.randomBossInterval = setInterval(function(){
                        if(vars.wavesCompleted < vars.waves)
                            game.randBossBattle(vars);
                    }, vars.intervalTime);
            },
            'vars' : {
                set : false,
                interactive : false,
                intervalTime : 0,
                waves : 0,
                wavesCompleted : 0,
                wins : 0,
                rbSoldiers : 0,
                soldiersRestore : 0,
                excludeSoldiers : [],
                rewards : {
                    bc : 0,
                    money: 0,
                    drops : {
                        'ring_of_efficiency' : 6,
                        'godspear_fragment' : 15,
                        'cheap_labor' : 4,
                        'attack_boost' : 8,
                        'speed_research' : 1,
                        'diminishing_research' : .5
                    }
                }
            }
        },
        2 : {
            'func' : function(){
                    var me = gameVars.bossScenario['boss'];
                    var vars = me['vars'];
                    var bossDifficulty = gameVars.bossDifficulty;

                    if(!vars.set){
                        vars.health = bossDifficulty*300000;
                        vars.startHealth = vars.health;
                        vars.rewards.bc = bossDifficulty;
                        vars.rewards.money = 600000000*bossDifficulty;

                        //how quick will the attacks be?
                        switch(bossDifficulty){
                            case 1:
                                vars.healRate = 200;
                                vars.time = 4;
                                vars.waves = 1;
                                break;
                            case 2:
                                vars.healRate = 400;
                                vars.time = 3;
                                vars.waves = 2;
                                break;
                            case 3:
                                vars.healRate = 600;
                                vars.time = 2;
                                vars.waves = 3;
                                break;
                            default:
                                vars.healRate = 800;
                                vars.time = 1;
                                vars.waves = 4;
                                break;
                        }

                        var html = 'Below is your scenario for this random boss<hr><br/><table>';

                        html += '<tr><td><b>Boss Name</b></td><td>'+ gameVars.bossScenario['boss']['name'] +'</td></tr>';
                        html += '<tr><td><b>Scenario Type</b></td><td>Interactive</td></tr>';
                        html += '<tr><td><b>Difficulty</b></td><td>Level '+ bossDifficulty +'</td></tr>';
                        html += '<tr><td><b>Health:</b></td><td>'+ funcs.numberFormat(vars.health) +'</td></tr>';
                        html += '<tr><td><b>Heal rate: </b></td><td>'+ funcs.numberFormat(vars.healRate) +' per second</td></tr>';
                        html += '<tr><td><b>Timer</b></td><td>'+ vars.time +' minutes</td></tr>';
                        html += '<tr><td><b>Rewards:</b></td><td>'+ funcs.numberFormat(vars.rewards.bc) +' boss currency, $'+ funcs.numberFormat(vars.rewards.money) +'</td></tr></table>';

                        game.popup('SCENARIO #2', html, '', 0);
                        vars.set = true;

                        //show the boss
                        game.player.client.emit('showRandomBossInteractive', {name : gameVars.bossScenario['boss']['name']});
                    }

                    var timeInMilliseconds = ((vars.time)*60*1000);
                    game.randomBossInterval = setInterval(function(){
                        var d = new Date().getTime();

                        if(vars.timeStart == 0){
                            vars.timeStart = d;
                        }else{
                            //time comparison in milliseconds
                            var won = (vars.health <= 0 && vars.wavesCompleted == vars.waves) ? true : false;

                            if((d-vars.timeStart) > timeInMilliseconds || won){
                                //time is up!
                                if(won){
                                    //win!
                                    game.bossWon(vars);
                                    
                                    //var exp earned
                                    var exp = self.expEarnedBasedOnBF(gameVars.bossDifficulty);
                                    gameVars.exp += exp;
                                    
                                    //item drops!
                                    var drops = game.getDrops(vars.rewards.drops);
                                    var drophtml = '';
                                    
                                    if(drops.length > 0){
                                        for(var i = 0; i < drops.length; i++){
                                            var iObj = resources.items.items[drops[i]];
                                            drophtml += '<span class="popup_item"><b>'+ iObj.name +'</b><br/><img src="'+ iObj.img +'" /></span>';
                                        }
                                    }else{
                                        drophtml = '<br/>No items were dropped by the random boss.';
                                    }

                                    var html = 'You have successfully beat this random boss.<hr><table>';
                                    html += '<tr><td><b>Difficulty:</b></td><td>'+ bossDifficulty +'</td></tr>';
                                    html += '<tr><td><b>Total waves:</b></td><td>'+ vars.waves +'</td></tr>';
                                    html += '<tr><td><b>Successful waves:</b></td><td>'+ vars.wavesCompleted +'<br/><br/></td></tr>';
                                    html += '<tr><td><span class="popup_rewardstitle">REWARDS</span></td></tr>';
                                    html += '<tr><td><b>Money earned:</b></td><td>$'+ game.funcs.numberFormat(vars.rewards.money) +'</td></tr>';
                                    html += '<tr><td><b>Boss currency earned:</b></td><td>'+ game.funcs.numberFormat(vars.rewards.bc) +'</td></tr>';
                                    html += '<tr><td><b>Experience Gained:</b></td><td>'+ self.funcs.numberFormat(exp) +'</td></tr>';
                                    html += '<tr><td colspan="2"><b>Items dropped</b></td></tr>';
                                    html += '<tr><td style="width:100%;">'+ drophtml +'</td></tr>';

                                    game.popup('ACTIVITY PASSED!', html, '', 0);
                                    gameVars.bossLastGenerated = d;
                                }else{
                                    //fail!
                                    game.popup('ACTIVITY FAILED!', 'You failed to complete the random boss activity. You receive no rewards.', '', 0);
                                }

                                clearInterval(game.randomBossInterval);
                                game.randomBossInterval = false;
                                gameVars.bossScenario['active'] = false;

                                if(!gameVars.overWorld)
                                    game.player.client.emit('showRandomBossPortal', true);
                                
                            }else{
                                vars.health += vars.healRate;

                                //don't heal over max health
                                if(vars.health > 0)
                                    vars.health = vars.startHealth;
                            }
                        }

                        //update button countdown
                        var cooldown = (d-vars.lastAttack)/1000;
                        
                        game.player.client.emit('updateElements', {
                           '#randomBossArea button[name="attack_randomboss"]' : (cooldown < 10) ? 'Attack (' + Math.round(10-cooldown) +')' : 'Attack',
                           '#randomBossArea span[name="timer"]' : funcs.timeToString(
                                timeInMilliseconds - (d-vars.timeStart), ''
                            ),
                            '#randomBossArea span[name="wave"]' : vars.wavesCompleted+'/'+vars.waves
                        });
                    }, 1000);
            },
            'vars' : {
                set : false,
                interactive : true,
                waves:  0,
                wavesCompleted : 0,
                health : 0,
                healRate : 0,
                startHealth : 0,
                lastHeal : 0,
                time : 0,
                timeStart : 0,
                lastAttack : 0,
                rewards : {
                    bc : 0,
                    money : 0,
                    drops : {
                        'ring_of_efficiency' : 6,
                        'godspear_fragment' : 15,
                        'cheap_labor' : 4,
                        'attack_boost' : 8,
                        'speed_research' : 1,
                        'diminishing_research' : .5
                    }
                }
            }
        }
    }

    this.bossNames = donors;
}

exports.Bosses = Bosses;