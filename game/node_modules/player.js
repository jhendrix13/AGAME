function Player(mysql_pool, resources, players, client, clients, servVars){
    this.mysql_pool = mysql_pool;
    this.players = players;
    this.client = client;
    this.clients = clients;
    this.resources = resources;
    this.servVars = servVars;
    
    //user vars
    this.loggedIn = false;
    this.userid = 0;
    this.username = 0;
    this.rights = 0;
    this.gcycle = 0;
    this.init = false;
    this.gameVars = {
        money : 0,
        lastMine: 0,
        lastSubmit: 0,
        lastSave : 0,
        achievements : {},
        moneyPerTick : 0,
        lastMoneyTick : 0,
        totalMoneyEarned : 0,
        statLootMoney : 0,
        statEnemiesKilled : 0,
        statDefendersKilled : 0,
        statBattlesWon : 0,
        statBattlesLost : 0,
        statWorkerOPM : 0,
        statMoneyPerTick : 0,
        vault : {},
        vaultStorageSettings : {},
        vault_max_upgrades : 20,
        vault_cost_per_upgrade_baseprice : 500,
        vault_cost_per_upgrade_modifier : 3,
        vault_storage_per_upgrade : 250,
        vault_max_storage : 250,
        pickaxe_type : 'wood',
        pickaxeUpgradeAvailable : false,
        maxWorkerMultiplier : 1,
        hasAutoPilot : false,
        autoPilotEnabled : false,
        autoPilotCost : 500000,
        pickaxeAnimation : true,
        zbMoneyStolen : 0,
        canGetZombieProtection : false,
        zbChance : 0,
        zbChanceModifier : 1.10,
        zbActive : false,
        befriendedGolem : false,
        golemCost : 25000,
        golemHasOffered : false,
        befriendedWitch : false,
        witchCost : 25000,
        witchHasOffered : false,
        dcUnlocked : false,
        dcIntro : false,
        dcSoldiers : 0,
        dcChance : 5,
        dcAttacks : 0,
        dcOption : 0,
        dcActive : false,
        dcRanAway : false,
        ulUnlocked : false,
        ulActive : false,
        ulIntro : false,
        ulSoldiers : 0,
        ulChance : 5,
        shrineHealth : 500000,
        shrineLastAttack : 0,
        ebUnlocked : false,
        ebIntro : false,
        ebSoldiers : 0,
        ebAttacks : 0,
        ebHint : false,
        ebHealth : 5000000,
        ebOrbs : {
                1 : 1000000,
                2 : 1000000,
                3 : 1000000
        },
        ebOrbsLastAttacked : 0,
        ebLastAttack : 0,
        dbResurrected : false,
        zbResurrected : false,
        employed : {},
        workerToggle : true,
        workerHappiness : 100,
        workersLastPaid : 0,
        workerTotalWages : 0,
        workerCurrentWages : 0,
        workerOPMLost : 0,
        workerPayCycle : 1200000,
        workerAutoWage : false,
        workerAutoWageCost : 10000000000,
        employedSoldiers : {},
        hasInsurance : false,
        insuranceCost : 5000000,
        portalParts : 0,
        portalBuilt : false,
        portalLit : false,
        portalPartChance : 75,
        portalCost : 750000,
        portalIgniteCost : 0,
        portalWarning : true,
        overWorld : true,
        portal : 0,
        ownsResearchLab : false,
        scientists : 0,
        scientistsBC : 0,
        scientistCostBC : 2,
        scientistBCMode : false,
        scientistTime : 1,
        projects : {},
        finishedResearch : {},
        researching : false,
        workerOPMResearch : 0,
        partWaysCost : 100000,
        bossCurrency : 0,
        bossLastGenerated : 0,
        bossDifficulty : 1,
        bossDifficultyCap : 40,
        bossCooldown : 60000,
        bossesDefeated : 0,
        bossScenario : {
                'active': false,
                'scenario_ID':0,
                'boss': {}
        },
        village : {
            'formed' : false,
            'setup' : {}
        },
        villageCost : 250000000,
        lawMakers : 0,
        lawMakerCost : 1250000,
        inventory_capacity : 20,
        inventory : [],
        active_item_bonuses : {},
        dropConfirm : true,
        exp : 0,
        expModifier : 1
    };
}

Player.prototype.login = function(session){
    var self = this;
    if(typeof session != 'undefined'){
        //alright so they have a session set
        //is it a "legit" session?
        self.mysql_pool.getConnection(function(err, conn){
            if(!err){
                var sql = 'SELECT `id`,`username`,`save`,`rights`,`flag`,`disabled`,`avatar` FROM `users` WHERE `session` = ? LIMIT 1';

                conn.query(sql, [session], function(err, results){
                    conn.destroy();
                    
                    if(!err){
                        if(results.length == 1 && session.length > 0 && results[0].id != 1){
                            //logged in!
                            var userid = results[0].id;
                            var username = results[0].username;
                            var rights = results[0].rights;
                            var ip = null;
                            
                            try {
                                ip = self.client.handshake.address.address;
                            }catch(e){
                                console.log(e);
                            }
                            
                            var save = false;
                            
                            if(results[0].disabled){
                                self.client.emit('disabled', true);
                                self.client.disconnect();
                            }else{
                                //already an active session!
                                if(!(typeof self.players[userid] == 'undefined' || self.players[userid].active == false)){
                                    var clientID = self.players[userid].clientID;
                                    
                                    //disconnect active client
                                    if(typeof self.clients.sockets[clientID] != 'undefined'){
                                        console.log(clientID + ' disconnected due to multiple sessions.');
                                        self.clients.sockets[clientID].disconnect();
                                    }
                                }
                                
                                //is testing mode enabled?
                                if(self.servVars.testing && rights < 2){
                                    console.log(self.username + ' disconnected as they do not have testing privileges.');
                                    self.client.emit('testing', true);
                                    self.client.disconnect();
                                }
                                
                                save = (results[0].save.length > 0) ? JSON.parse(results[0].save) : false;
                                flagged = (results[0].flag == 1) ? true : false;

                                console.log('User '+ username +' ('+ userid +') has been verified and logged in.');
                                self.username = username;
                                self.userid = userid;
                                self.rights = rights;
                                self.ip = ip;
                                self.floodflags = 0;
                                self.loggedIn = true;
                                self.flagged = flagged;
                                self.lastEvent = 0;
                                self.avatar = results[0].avatar;
                                self.players[userid] = {
                                    'username' : username,
                                    'clientID' : self.client.id,
                                    'active' : true,
                                    'ip' : ip
                                };

                                self.load(save);
                                self.client.emit('loginAttemptResult', {
                                    success: true,
                                    userid: userid,
                                    username: username,
                                    rights: rights
                                });
                            }
                        }else{
                            //not logged in
                            self.username = 'Guest_'+ self.client.id;
                            
                            if(self.servVars.testing){
                                console.log(self.username + ' disconnected as they do not have testing privileges.');
                                self.client.emit('testing', true);
                                self.client.disconnect();
                            }
                            
                            self.load(save);
                            self.client.emit('loginAttemptResult', {
                                success : false
                            });
                            self.client.emit('resources', self.resources);
                            console.log('Failed to login. Playing as '+ self.userame);
                        }
                    }else{
                        console.log(err);
                    }
                });
            }else{
                console.log(err);
            }
        });
    }
}

/*
 *  This login function is called if the create an account as a guest
 *  and their session is set after them being logged in
 */

Player.prototype.quickLogin = function(session){
    var self = this;
    
    self.mysql_pool.getConnection(function(err, conn){
    if(!err){
        var sql = 'SELECT `id`,`username` FROM `users` WHERE `session` = ? LIMIT 1';

        conn.query(sql, [session], function(err, results){
            conn.destroy();
            
            if(!err){
                if(results.length == 1){
                    //logged in!
                    var userid = results[0].id;
                    var username = results[0].username;
                    var save = false;

                    if(typeof self.players[userid] == 'undefined' || self.players[userid].active == false){
                        console.log('[QUICK LOGIN] User '+ username +' ('+ userid +') has been verified and logged in.');
                        self.username = username;
                        self.userid = userid;
                        self.loggedIn = true;
                        self.players[userid] = {
                            'username' : username,
                            'clientID' : self.client.id,
                            'active' : true
                        };
                    }else{
                        self.client.disconnect();
                    }
                }else{
                    console.log('Attempted quick login incorrect.');
                }
            }else{
                console.log(err);
            }
        });
    }else{
        console.log(err);
    }
});
}

Player.prototype.submit = function(){
    var self = this;
   
    this.mysql_pool.getConnection(function(err, conn){
        if(!err){
            var sql = 'SELECT * FROM `highscores` WHERE `userid` = ?';
            conn.query(sql, [self.userid], function(err, results){
                if(!err){
                    //do they already have a highscore?
                    if(results.length > 0){
                        sql = 'UPDATE `highscores` SET `money_earned` = ?, `pickaxe` = ?, `worker_opm` = ?, `army_strength` = ?, `scientists` = ?, `achievements` = ?, `data` = ?, `datetime` = NOW() WHERE `userid` = ? LIMIT 1';

                        var updateParams = [
                            self.gameVars.totalMoneyEarned,
                            self.gameVars.pickaxe_type,
                            self.getWorkerTotalOPM(),
                            self.getArmyStrength(),
                            (self.gameVars.scientists + self.gameVars.scientistsBC),
                            JSON.stringify(self.gameVars.achievements),
                            JSON.stringify(self.gameVars),
                            self.userid
                        ];

                        conn.query(sql, updateParams, function(err, results){
                            conn.destroy();
                            if(err) console.log(err);
                        });
                    }else{
                        sql = 'INSERT INTO `highscores` VALUES (null, ?, ?, ?, ?, ?, ?, ?, NOW(), ?)';

                        var insertParams = [
                            self.userid,
                            self.gameVars.totalMoneyEarned,
                            self.gameVars.pickaxe_type,
                            self.getWorkerTotalOPM(),
                            self.getArmyStrength(),
                            (self.gameVars.scientists + self.gameVars.scientistsBC),
                            JSON.stringify(self.gameVars.achievements),
                            JSON.stringify(self.gameVars)
                        ];

                        conn.query(sql, insertParams, function(err, results){
                            conn.destroy();
                            if(err) console.log(err);
                        });
                    }

                    self.gameVars.lastSubmit = new Date().getTime();
                }else{
                    console.log(err);
                }
            });
        }else{
            console.log(err);
        }
    });
}

Player.prototype.save = function(){
    var self = this;
    
    //all values can be changed to be exactly equal to what they are
    var save = JSON.stringify(this.gameVars);
    
    this.mysql_pool.getConnection(function(err, conn){
        if(!err){
            var sql = 'UPDATE `users` SET `save` = ? WHERE `id` = ? LIMIT 1';
            conn.query(sql, [save, self.userid], function(err, results){
                conn.destroy();

                if(!err){
                    if(results.affectedRows > 0)
                        self.gameVars.lastSave = new Date().getTime();
                    else
                        console.log('Could not update '+ self.userid);
                }else{
                    console.log(err);
                }
            });
        }else{
            console.log(err);
        }
    });
}

Player.prototype.flag = function(){
    var self = this;
    this.mysql_pool.getConnection(function(err, conn){
        if(!err){
            var sql = 'UPDATE `users` SET `flag` = 1 WHERE `id` = ? LIMIT 1';
            conn.query(sql, [self.userid], function(err, results){
                conn.destroy();

                if(!err){
                    console.log(self.username +' has been flagged.');
                }else{
                    console.log(err);
                }
            });
        }else{
            console.log(err);
        }
    });
}

Player.prototype.load = function(save){
    var self = this;
    
    //fill in workers data
    var o;
    for (var w in self.resources.items.workers) {
            o = {};
            for (var ore in self.resources.items.ores) {
                    o[ore] = 0;
            }
            self.gameVars.employed[w] = [0, o];
    }
    
    //loop through object and load each element into session
    if(save){
        for(var key in save)
            self.gameVars[key] = save[key];
    }

    //since last save new workers and ores may have been added, so lets update that accordingly
    //if just new ore has been added, we need to update each worker's ore array/object
    for(var worker in self.resources.items.workers) {
        if( typeof self.gameVars.employed[worker] == 'undefined') {
                //add the new worker to the employed object
                var o = {};
                for (var ore in self.resources.items.ores) {
                        o[ore] = 0;
                }

                self.gameVars.employed[worker] = [0, o];
        } else {
                //if new ore was added, the workers need to have that added to their "Storage"
                for (var ore2 in self.resources.items.ores) {
                        if ( typeof self.gameVars.employed[worker][1][ore2] == 'undefined')
                                self.gameVars.employed[worker][1][ore2] = 0;
                }
        }
    }

    //placeholder data for soldiers
    for(var soldier in self.resources.items.soldiers) {
        if(self.gameVars.employedSoldiers[soldier] == undefined)
            self.gameVars.employedSoldiers[soldier] = 0;
    }
    
    //now lets add in any modified variables from
    //resources "class"
    for(var gameVar in self.resources.gameVarModifiers)
        self.gameVars[key] = self.resources.gameVarModifiers[gameVar];
    
    this.gameVars.loaded = true;
    this.gameVars.overWorld = true;
}

Player.prototype.getArmyStrength = function(){
    var self = this;
    var strength = 0;
    for(var soldier in self.gameVars.employedSoldiers) {
        var kpe = self.resources.items.soldiers[soldier].kpe;
        strength += self.gameVars.employedSoldiers[soldier] * kpe;
    }

    return strength;
}

Player.prototype.getWorkerTotalOPM = function(){
    var self = this;
    var opm = 0;
    for (var worker in self.gameVars.employed) {
            opm += (self.gameVars.employed[worker][0] * (self.resources.items.workers[worker].opm + self.resources.items.workers[worker].opmModifier));
    }
    return opm;
}

//export class
exports.Player = Player;